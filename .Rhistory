list <- list()
for(i in 1:5){
append (list, seq(1:2))
}
list
list <- list()
for(i in 1:5){
list.append(list, seq(1:2))
}
list <- list()
for(i in 1:5){
list.append(list, 1:2)
}
list <- list()
for(i in 1:5){
list.append(list, 1:2)
}
list <- list()
for(i in 1:5){
append(list, 1:2)
}
list
list <- list()
for(i in 1:5){
list <- append(list, 1:2)
}
list
list <- list()
for(i in 1:5){
list <- arr(append(list, 1:2))
}
list <- list()
for(i in 1:5){
list <- array(append(list, 1:2))
}
list
list <- list()
for(i in 1:5){
list <- matrix(append(list, 1:2))
}
list
list <- list()
for(i in 1:5){
list <- (append(list, 1:2)
}
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
matrix(list)
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
list
#matrix(list)
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
matrix(list)
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
matrix(list).transpose()
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
transpose(matrix(list))
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
matrix(list)
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
list
list <- list()
for(i in 1:5){
list <- (append(list, 1:2))
}
array(list)
list <- list()
for(i in 1:5){
list <- array(append(list, 1:2))
}
list
list <- list()
for(i in 1:5){
list <- matrix(append(list, 1:2))
}
list
list <- list()
for(i in 1:5){
list <- append(list, 1:2)
}
list
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
array(list)
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
array(list, dim = 1,10)
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1)
}
list
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1)
list <- append(list, 2)
}
list
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
unlist(list)
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
print(unlist(list))
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
print(unlist(list))
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
print(unlist(list))
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
unlist(list)
#array(list, dim = list(1,10))
list <- list()
#array(unlist(L), dim = c(nrow(L[[1]]), ncol(L[[1]]), length(L)))
for(i in 1:5){
list <- append(list, 1:2)
}
unlist(list)
list <- list()
for(i in 1:5){
list <- append(list, 1:2)
}
unlist(list)
x1 <- x2 <- x3 <- 1:100; x2[50] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x1[51] <- x1[50]; x2[50] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x1[49] <- x1[50]; x1[51] <- x1[50]; x2[50] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x2[50] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
median(x1)
mean(x1)
x1 <- x2 <- x3 <- 1:100; x2[59] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x2[58] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x2[1] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x2[1] <- x2[60]; x3[50] <- x3[40]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
x1 <- x2 <- x3 <- 1:100; x2[1] <- x2[60]; x3[60] <- x3[1]
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make mean smalle and median bigger)
x3[60] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
median(x3)
mean(x3)
median(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[50] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
median(x3)
mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[99] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
median(x3)
mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[1] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[48] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[50] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[50] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
median(x2)
mean(x2)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[99];
#Replace 60 with 1 (make median smaller )
x3[50] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
median(x2)
mean(x2)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger and mean smaller)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller )
x3[60] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
#Create sequence 1 to 100
x1 <- x2 <- x3 <- 1:100;
#Replace 1 with 60 (make median bigger than mean)
x2[1] <- x2[60];
#Replace 60 with 1 (make median smaller than mean)
x3[60] <- x3[1]
#Display Logic
median(x1) == mean(x1)
median(x2) > mean(x2)
median(x3) < mean(x3)
var2 <- function(vector) {
#variables needed for formula
x_bar <- mean(vector)
n <- length(vector)
return((sum((vector - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
var2 <- function(x_i) {
#variables needed for formula
x_bar <- mean(vector)
n <- length(vector)
#returning sample variance
return((sum((x_i - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
var2 <- function(x) {
#variables needed for formula
x_bar <- mean(vector)
n <- length(vector)
#returning sample variance
return((sum((x - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
var2 <- function(x_i) {
#variables needed for formula
x_bar <- mean(x_i)
n <- length(x_i)
#returning sample variance
return((sum((x_i - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
help("double")
str(.Machine$double.xmax)
.Machine$double.xmax
str(.Machine$double.xmax + 1L)
str(.Machine$double.xmax)
.Machine$double.xmax
x <- replicate(1000, sum(sample(1:0, 10, TRUE)))
record <- table(x)
record
n = 10
sample(0:1, n, rep = T)
sum(ten_coin_tosses[x ==1])
n = 10
ten_coin_tosses <- sample(0:1, n, rep = T)
ten_coin_tosses
sum(ten_coin_tosses[x ==1])
sum(ten_coin_tosses[ten_coin_tosses == 1])
n = 1000
ten_coin_tosses <- sample(0:1, n, rep = T)
ten_coin_tosses
n = 10
ten_coin_tosses <- replicate(sample(0:1, n, rep = T),1000)
n = 10
ten_coin_tosses <- replicate(1000,sample(0:1, n, rep = T))
ten_coin_tosses
n = 10
one_thousand_ten_coin_tosses <- replicate(1000, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses
n = 10
one_thousand_ten_coin_tosses <- replicate(1000, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
sum(ten_coin_tosses)
n = 10
ten_coin_tosses <- sample(0:1, n, rep = T)
ten_coin_tosses
sum(ten_coin_tosses[ten_coin_tosses == 1])
n = 10
ten_coin_tosses <- sample(0:1, n, rep = T)
ten_coin_tosses
sum(ten_coin_tosses[ten_coin_tosses == 1])
sum(ten_coin_tosses)
n = 10
ten_coin_tosses <- sample(0:1, n, rep = T)
ten_coin_tosses
sum(ten_coin_tosses)
n = 10
ten_coin_tosses <- sample(0:1, n, rep = T)
ten_coin_tosses
sum(ten_coin_tosses)
n = 10
one_thousand_ten_coin_tosses <- replicate(1000, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
sum(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses['7']
n_sample = 10
ten_coin_tosses <- sample(0:1, n_sample, rep = T)
ten_coin_tosses
sum(ten_coin_tosses)
n = 1000
one_thousand_ten_coin_tosses <- replicate(1000, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
n = 1000
one_thousand_ten_coin_tosses <- replicate(n, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
n = 1000
one_thousand_ten_coin_tosses <- replicate(n, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
one_thousand_ten_coin_tosses <- replicate(n, sum(sample(0:1, n, rep = T)))
n = 1000
one_thousand_ten_coin_tosses <- replicate(n, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
n = 1000
one_thousand_ten_coin_tosses <- replicate(n, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
one_thousand_ten_coin_tosses <- replicate(n, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
n = 1000
one_thousand_ten_coin_tosses <- replicate(1000, sum(sample(0:1, n, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
number_of_coin_tosses = 10
ten_coin_tosses <- sample(0:1, number_of_coin_tosses, rep = T)
ten_coin_tosses
sum(ten_coin_tosses)
trial = 1000
one_thousand_ten_coin_tosses <- replicate(trials, sum(sample(0:1, number_of_coin_tosses, rep = T)))
trials = 1000
one_thousand_ten_coin_tosses <- replicate(trials, sum(sample(0:1, number_of_coin_tosses, rep = T)))
one_thousand_ten_coin_tosses <- table(one_thousand_ten_coin_tosses)
one_thousand_ten_coin_tosses
one_thousand_ten_coin_tosses['7'] / trials
sample_mean <- one_thousand_ten_coin_tosses['7'] / trials
sample_mean
knitr::opts_chunk$set(comment = NA, prompt = TRUE, collapse = TRUE)
var2 <- function(x) {
#variables needed for formula
x_i <- x[!x %in% boxplot.stats(x)$out]
x_bar <- mean(x_i)
n <- length(x_i)
#returning sample variance
return((sum((x_i - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
var2 <- function(x_i) {
#variables needed for formula
x_bar <- mean(x_i)
n <- length(x_i)
#returning sample variance
return((sum((x_i - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
var2 <- function(x) {
#variables needed for formula
x_i <- x[!x %in% boxplot.stats(x)$out]
x_bar <- mean(x_i)
n <- length(x_i)
#returning sample variance
return((sum((x_i - x_bar)^2)) / (n - 1) )
}
var2(1:10)
var2(exp(1:10))
list <- list()
for(i in 1:5){
list <- append(list, 1:2)
}
unlist(list)
